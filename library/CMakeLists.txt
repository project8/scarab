# CMakeLists.txt for Scarab/library
# Author: N. Oblath
# Created: Jan 4, 2016

# Minimum cmake verison 3.1 required for the variable CMAKE_CXX_STANDARD
cmake_minimum_required (VERSION 3.1)

#########
# setup #
#########

# load the version number from the Scarab/VERSION file
file( STRINGS ${CMAKE_CURRENT_SOURCE_DIR}/../VERSION scarab_version_from_file )
string( REPLACE " " "." scarab_version ${scarab_version_from_file} )

cmake_policy( SET CMP0048 NEW ) # version in project()
project( Scarab VERSION ${scarab_version} )

list( APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/../cmake )

include( PackageBuilder )

pbuilder_prepare_project()


##################
# Scarab options #
##################

option( Scarab_BUILD_CODEC_JSON "Flag to enable building the JSON codec (requires Scarab_BUILD_PARAM)" TRUE )

option( Scarab_BUILD_CODEC_YAML "Flag to enable building the YAML codec (requires Scarab_BUILD_PARAM)" TRUE )

option( Scarab_BUILD_AUTHENTICATION "Flag to enable building of the authentication class (requires Scarab_BUILD_CODEC_JSON)" TRUE )

option( Scarab_BUILD_PARAM "Flag to enable building of the param class" TRUE )

option( Scarab_BUILD_CLI "Flag to enable the building of the command-line interface class" TRUE )

option( Scarab_BUILD_PYTHON "Build python bindings" TRUE )

if( (Scarab_BUILD_CODEC_JSON OR Scarab_BUILD_CODEC_MSGPACK OR Scarab_BUILD_CODEC_YAML OR Scarab_BUILD_AUTHENTICATION OR Scarab_BUILD_CLI) AND NOT Scarab_BUILD_PARAM )
    message( FATAL_ERROR "Invalid combination of build options.  Building the Codecs, Authentication, and CLI requires Param.  If you want these elements, turn on Param.  If you want Param off, turn these elements off." )
endif()

if( Scarab_BUILD_AUTHENTICATION AND NOT Scarab_BUILD_CODEC_JSON )
    message( FATAL_ERROR "Invalid combination of build options.  Building Authentication requires the JSON Codec.  If you want Authentication, turn on the JSON Codec.  If you want the JSON Codec off, turn Authentication off.")
endif()

#######################
# Scarab dependencies #
#######################

if( Scarab_BUILD_CODEC_JSON )
	# filesystem and system for param_value's use of boost::filesystem::path
	# thread and date_time for concurrent_queue
	set( boost_components filesystem system thread date_time )

    # RapidJSON
    option( RAPIDJSON_BUILD_DOC "Build rapidjson documentation." OFF )
    option( RAPIDJSON_BUILD_EXAMPLES "Build rapidjson examples." OFF )
    option( RAPIDJSON_BUILD_TESTS "Build rapidjson perftests and unittests." OFF )
    option( RAPIDJSON_BUILD_THIRDPARTY_GTEST "Use gtest installation in `thirdparty/gtest` by default if available" OFF )
    option( RAPIDJSON_BUILD_CXX11 "Build rapidjson with C++11 (gcc/clang)" ON )
    option( RAPIDJSON_BUILD_ASAN "Build rapidjson with address sanitizer (gcc/clang)" OFF )
    option( RAPIDJSON_BUILD_UBSAN "Build rapidjson with undefined behavior sanitizer (gcc/clang)" OFF )
    set( RAPIDJSON_FILE_BUFFER_SIZE 65536 CACHE STRING "Buffer size for reading and writing files using RapidJSON (in Bytes)" )
    
    add_definitions( -DRAPIDJSON_FILE_BUFFER_SIZE=${RAPIDJSON_FILE_BUFFER_SIZE} )
    add_definitions( -DUSE_CODEC_JSON )
    
    add_subdirectory( param/codec/json/rapidjson )
    include_directories( BEFORE ${CMAKE_CURRENT_SOURCE_DIR}/param/codec/json/rapidjson/include/ )
else( Scarab_BUILD_CODEC_JSON )
    remove_definitions( -DUSE_CODEC_JSON )
endif( Scarab_BUILD_CODEC_JSON )

if( Scarab_BUILD_CODEC_YAML )
	set_option( USE_CPP11 TRUE )

    # Yaml-cpp
    option( YAML_CPP_BUILD_TOOLS "yaml-cpp option setting" OFF )
	option( YAML_CPP_BUILD_TESTS "Enable parse tools" OFF )
    option( YAML_CPP_BUILD_CONTRIB "yaml-cpp option setting" OFF )
    option( BUILD_SHARED_LIBS "yaml-cpp option setting" ON )
    add_subdirectory( param/codec/yaml/yaml-cpp )
    # I'm hard-coding the include directory and library because I ran into an error when I tried to include ${CMAKE_CURRENT_BINARY_DIR}/param/codec/yaml/yaml-cpp/yaml-cpp-config.cmake )
    include_directories( BEFORE ${CMAKE_CURRENT_SOURCE_DIR}/param/codec/yaml/yaml-cpp/include )
    pbuilder_add_ext_libraries( yaml-cpp )
endif( Scarab_BUILD_CODEC_YAML )

list( APPEND boost_components filesystem system )

# making sure boost_components is not empty and remove duplicate
if (boost_components)
    list( REMOVE_DUPLICATES boost_components )
endif ( boost_components)

# Boost (1.46 required for filesystem version 3)
find_package( Boost 1.46.0 REQUIRED COMPONENTS ${boost_components} )
# make sure dynamic linking is assumed for all boost libraries
#add_definitions( -DBOOST_ALL_DYN_LINK )
set( Boost_USE_STATIC_LIBS OFF )
set( Boost_USE_STATIC_RUNTIME OFF )
set( Boost_ALL_DYN_LINK ON )
include_directories( ${Boost_INCLUDE_DIRS} )
# No compiled libraries are currently required
pbuilder_add_ext_libraries( ${Boost_LIBRARIES} )
    
# For gethostname in version_semantic
if( WIN32 )
    pbuilder_add_ext_libraries( "Ws2_32.lib" )
endif( WIN32 )

# date library
include_directories( BEFORE ${PROJECT_SOURCE_DIR}/external/date )

# cli11 library
if( Scarab_BUILD_CLI )
    include_directories( BEFORE ${PROJECT_SOURCE_DIR}/external/cli11 )
endif( Scarab_BUILD_CLI )

# Pybind11
if( Scarab_BUILD_PYTHON )
    set( PYBIND11_INSTALL ON CACHE BOOL "Pybind11 option to install itself" FORCE )
    add_subdirectory( external/pybind11 )
    include_directories( external/pybind11/include )    
endif( Scarab_BUILD_PYTHON )


########################
# Build Scarab library #
########################

# Unlike many other libraries in the P8 codebase, Scarab builds its library here, 
# only using subdirectories to add relevant files to the Scarab_HEADERS and Scarab_SOURCES list variables.


include_directories( BEFORE
    ${PROJECT_SOURCE_DIR}/utility
    ${PROJECT_SOURCE_DIR}/logger
    ${PROJECT_SOURCE_DIR}/version
)

##########

set( Scarab_HEADERS )
set( Scarab_SOURCES )

include_directories( BEFORE 
    ${CMAKE_CURRENT_BINARY_DIR}/utility 
    ${CMAKE_CURRENT_BINARY_DIR}/version 
)
add_subdirectory( utility )
add_subdirectory( version )
add_subdirectory( logger )

if( Scarab_BUILD_PARAM )
    include_directories( BEFORE ${PROJECT_SOURCE_DIR}/param )
    add_subdirectory( param )
endif( Scarab_BUILD_PARAM )

if( Scarab_BUILD_CODEC_JSON )
    include_directories( BEFORE ${PROJECT_SOURCE_DIR}/param/codec/json )
    add_subdirectory( param/codec/json )
endif( Scarab_BUILD_CODEC_JSON )

if( Scarab_BUILD_CODEC_YAML )
    include_directories( BEFORE ${PROJECT_SOURCE_DIR}/param/codec/yaml )
    add_subdirectory( param/codec/yaml )
endif( Scarab_BUILD_CODEC_YAML )

if( Scarab_BUILD_AUTHENTICATION )
    include_directories( BEFORE ${PROJECT_SOURCE_DIR}/authentication )
    add_subdirectory( authentication )
endif( Scarab_BUILD_AUTHENTICATION )

if( Scarab_BUILD_CLI )
    include_directories( BEFORE ${PROJECT_SOURCE_DIR}/cli )
    include_directories( BEFORE ${PROJECT_SOURCE_DIR}/cli/deprecated )
    add_subdirectory( cli )
endif( Scarab_BUILD_CLI )

##########

pbuilder_library( Scarab Scarab_SOURCES "" )

pbuilder_install_headers( ${Scarab_HEADERS} )


##########
# Python #
##########

add_subdirectory( python )


###########
# Testing #
###########

add_subdirectory( test )


################################
# Variables for parent project #
################################

pbuilder_variables_for_parent()

